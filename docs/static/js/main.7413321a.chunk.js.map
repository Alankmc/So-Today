{"version":3,"sources":["components/action-text/action-builders/ActionBuilder.js","components/action-text/action-builders/ShareBuilder.js","components/action-text/ActionText.js","components/game-buttons/GameButtons.js","components/app/App.js","serviceWorker.js","index.js"],"names":["PLAYERS","ActionBuilder","currParams","Object","classCallCheck","this","obj","_this","keys","reduce","total","curr","concat","player","playerless","playerPool","reduceBasedOnParams","playerlessPool","actionIndex","Math","floor","random","length","value","isPlayerless","info","getMeFromArray","arr","ShareBuilder","possibleConstructorReturn","getPrototypeOf","call","console","log","name","playerlessActions","base","no_library","icebreak","actions","chosenAction","getAction","fullAction","getPlayer","get","prototype","ACTIONS","ActionText","state","currentAction","undefined","actionText","buttonHandler","thisActionText","thisAction","builders","buildAction","setState","gameParams","props","share","brokenText","breakText","react_default","a","createElement","id","className","onClick","map","text","Fragment","breaker","split","currIndex","currArr","thisArr","i","push","join","React","Component","GameButton","label","callback","type","App","handleParamClick","key","newParams","objectSpread","defineProperty","ActionText_ActionText","Boolean","window","location","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7413321a.chunk.js","sourcesContent":["const PLAYERS = [\n  'the player to your right',\n  'the player to your left',\n  'the player across from you',\n  'the youngest player',\n  'the oldest player',\n  'the strongest player',\n  'the hottest player',\n  'the tallest player',\n  'the shortest player',\n];\n\nexport default class ActionBuilder {\n  constructor(currParams) {\n    this.currParams = currParams;\n  }\n\n  static getMeFromArray(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  static getMe(obj) {\n    const keys = Object.keys(obj);\n    return ActionBuilder.getMeFromArray(keys);\n  }\n\n  reduceBasedOnParams(obj) {\n    const pool = Object.keys(obj).reduce((total, curr) => {\n      if (this.currParams[curr]) {\n        return total.concat(obj[curr]);\n      }\n      return total;\n    }, []);\n    return pool;\n  }\n\n  getAction(player, playerless) {\n    const playerPool = this.reduceBasedOnParams(player);\n    const playerlessPool = this.reduceBasedOnParams(playerless);\n    const actionIndex = Math.floor(Math.random() * (playerlessPool.length + playerPool.length));\n    if (actionIndex >= playerPool.length) {\n      return {\n        value: playerlessPool[actionIndex - playerPool.length],\n        isPlayerless: true,\n      };\n    }\n    return {\n      value: playerPool[actionIndex],\n      isPlayerless: false,\n    };\n  }\n\n  getInfo(info) {\n    return ActionBuilder.getMeFromArray(this.reduceBasedOnParams(info));\n  }\n\n  static getPlayer() {\n    return ActionBuilder.getMeFromArray(PLAYERS);\n  }\n}\n","import ActionBuilder from './ActionBuilder';\n\nexport default class ShareBuilder extends ActionBuilder {\n  constructor(currParams) {\n    super(currParams);\n    console.log('Building with', currParams);\n    this.name = 'Share';\n    this.playerlessActions = {\n      base: ['share with the group'],\n      no_library: ['yell out'],\n      icebreak: [\n        'tell a stranger',\n        'text you tinder crush',\n        'text someone on your contact list',\n      ],\n    };\n\n    this.actions = {\n      base: ['whisper in the ear of'],\n    };\n\n    this.info = {\n      base: [\n        'how your last shit was, in grand detail',\n        'something noone in the group knows',\n        'your favorite pokemon',\n        'the name of your least favorite person in the group',\n        'who you\\'re voting for',\n      ],\n    };\n  }\n\n  buildAction() {\n    const chosenAction = this.getAction(this.actions, this.playerlessActions);\n\n    let fullAction = chosenAction.value;\n    if (!chosenAction.isPlayerless) {\n      fullAction += ` ${ActionBuilder.getPlayer()}`;\n    }\n    fullAction += ` ${super.getInfo(this.info)}.`;\n\n    return fullAction;\n  }\n}\n","import React from 'react';\nimport ShareBuilder from './action-builders/ShareBuilder';\nimport './ActionText.css';\n\nconst ACTIONS = ['share'];\nconst BREAK_AT = 5;\n\nexport default class ActionText extends React.Component {\n  static breakText(text) {\n    const breaker = text.split(' ');\n    let currIndex = 0;\n    const currArr = [];\n    while (currIndex - breaker.length) {\n      const thisArr = [];\n      for (let i = 0; i < BREAK_AT; i += 1) {\n        if (currIndex === breaker.length) {\n          break;\n        }\n        thisArr.push(breaker[currIndex]);\n        currIndex += 1;\n      }\n      currArr.push(thisArr.join(' '));\n    }\n\n    return currArr;\n  }\n\n  state = {\n    currentAction: undefined,\n    actionText: 'Click me. I know you want to.',\n  };\n\n  static getMeFromArray(arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  buttonHandler = () => {\n    const thisAction = ActionText.getMeFromArray(ACTIONS);\n    let thisActionText;\n    switch (thisAction) {\n      case 'share':\n      case 'challenge':\n      case 'act_out':\n        // Challenge has as ACTION - (PLAYER) - TEXT - INFO structure\n        thisActionText = this.builders[thisAction].buildAction();\n        break;\n      default:\n        thisActionText = 'Uh whoops hang on';\n        break;\n    }\n    this.setState({ currentAction: thisAction, actionText: thisActionText });\n  }\n\n  render() {\n    const { gameParams } = this.props;\n    const { actionText } = this.state;\n    this.builders = {\n      share: new ShareBuilder(gameParams),\n    };\n\n    const brokenText = ActionText.breakText(actionText);\n\n    return (\n      <div id=\"action-text\" className=\"action-text-container\">\n        <span\n          onClick={this.buttonHandler}\n          id=\"action-text--span\"\n          className=\"action-text\"\n        >\n          {brokenText.map(text => (<>{text}<br /></>))}\n        </span>\n        <br />\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default function GameButton(props) {\n  const {\n    label, callback, value, type,\n  } = props;\n  return (<button type=\"button\" onClick={() => callback(type, !value)}>{label}</button>);\n}\n","import React, { Component } from 'react';\nimport ActionText from '../action-text/ActionText';\nimport GameButton from '../game-buttons/GameButtons';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      gameParams: {\n        base: true,\n        no_library: false,\n        icebreak: false,\n      },\n    };\n  }\n\n  handleParamClick = (key, value) => {\n    const { gameParams } = this.state;\n    const newParams = {\n      ...gameParams,\n      [key]: value,\n    };\n    this.setState({ gameParams: newParams });\n  }\n\n  render() {\n    const { gameParams } = this.state;\n    console.log('ummm.... not rendering?');\n    return (\n      <div id=\"root-app\" className=\"App\">\n        <h2>Current Game Settings:\n          { gameParams.no_library ? 'No Library' : ''},\n          {gameParams.icebreak ? 'Icebreak' : ''}\n        </h2>\n        <GameButton\n          label=\"Not at the Library\"\n          callback={this.handleParamClick}\n          type=\"no_library\"\n          value={gameParams.no_library}\n        />\n        <GameButton\n          label=\"Socialize\"\n          callback={this.handleParamClick}\n          type=\"icebreak\"\n          value={gameParams.icebreak}\n        />\n        <ActionText gameParams={gameParams} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* global document */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}